From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/en_rep.c

Change-Id: Ia5e71b2890470b4795778ae68dc765ebd9a7e3c3
---
 drivers/net/ethernet/mellanox/mlx5/core/en_rep.c | 320 ++++++++++++++++++++++-
 1 file changed, 318 insertions(+), 2 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@ -30,13 +30,18 @@
  * SOFTWARE.
  */
 
+#ifdef HAVE_UTSRELEASE_H
 #include <generated/utsrelease.h>
+#endif
 #include <linux/mlx5/fs.h>
 #include <net/switchdev.h>
 #include <net/pkt_cls.h>
+#ifdef HAVE_TC_SETUP_CB_EGDEV_REGISTER
 #include <net/act_api.h>
+#endif
 #include <net/netevent.h>
 #include <net/arp.h>
+#include <net/addrconf.h>
 
 #include "eswitch.h"
 #include "en.h"
@@ -46,6 +51,7 @@
 
 static const char mlx5e_rep_driver_name[] = "mlx5e_rep";
 
+#ifdef HAVE_UTSRELEASE_H
 static void mlx5e_rep_get_drvinfo(struct net_device *dev,
 				  struct ethtool_drvinfo *drvinfo)
 {
@@ -53,6 +59,7 @@ static void mlx5e_rep_get_drvinfo(struct
 		sizeof(drvinfo->driver));
 	strlcpy(drvinfo->version, UTS_RELEASE, sizeof(drvinfo->version));
 }
+#endif
 
 static const struct counter_desc sw_rep_stats_desc[] = {
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_packets) },
@@ -82,7 +89,11 @@ static void mlx5e_rep_update_hw_counters
 	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
 	struct mlx5e_rep_priv *rpriv = priv->ppriv;
 	struct mlx5_eswitch_rep *rep = rpriv->rep;
+#ifdef HAVE_RTNL_LINK_STATS64
 	struct rtnl_link_stats64 *vport_stats;
+#else
+	struct rtnl_link_stats *vport_stats;
+#endif
 	struct ifla_vf_stats vf_stats;
 	int err;
 
@@ -161,13 +172,17 @@ static int mlx5e_rep_get_sset_count(stru
 }
 
 static const struct ethtool_ops mlx5e_rep_ethtool_ops = {
+#ifdef HAVE_UTSRELEASE_H
 	.get_drvinfo	   = mlx5e_rep_get_drvinfo,
+#endif
 	.get_link	   = ethtool_op_get_link,
 	.get_strings       = mlx5e_rep_get_strings,
 	.get_sset_count    = mlx5e_rep_get_sset_count,
 	.get_ethtool_stats = mlx5e_rep_get_ethtool_stats,
 };
 
+#if (defined(HAVE_SWITCHDEV_OPS) && defined(CONFIG_NET_SWITCHDEV)) \
+    || defined(HAVE_SWITCHDEV_H_COMPAT)
 int mlx5e_attr_get(struct net_device *dev, struct switchdev_attr *attr)
 {
 	struct mlx5e_priv *priv = netdev_priv(dev);
@@ -179,7 +194,11 @@ int mlx5e_attr_get(struct net_device *de
 		return -EOPNOTSUPP;
 
 	switch (attr->id) {
+#ifdef HAVE_SWITCHDEV_ATTR_ID_PORT_PARENT_ID
 	case SWITCHDEV_ATTR_ID_PORT_PARENT_ID:
+#else
+	case SWITCHDEV_ATTR_PORT_PARENT_ID:
+#endif
 		attr->u.ppid.id_len = ETH_ALEN;
 		ether_addr_copy(attr->u.ppid.id, rep->hw_id);
 		break;
@@ -189,6 +208,7 @@ int mlx5e_attr_get(struct net_device *de
 
 	return 0;
 }
+#endif
 
 int mlx5e_add_sqs_fwd_rules(struct mlx5e_priv *priv)
 {
@@ -239,6 +259,7 @@ void mlx5e_remove_sqs_fwd_rules(struct m
 #define rep_netdev(rep) mlx5e_rep_to_context(rep)->netdev
 #define rep_priv(rep) netdev_priv(rep_netdev(rep))
 #define rpriv_priv(rpriv) rep_priv((rpriv)->rep)
+#ifdef HAVE_TCF_TUNNEL_INFO
 static void mlx5e_rep_neigh_update_init_interval(struct mlx5e_rep_priv *rpriv)
 {
 #if IS_ENABLED(CONFIG_IPV6)
@@ -284,12 +305,20 @@ static void mlx5e_rep_neigh_stats_work(s
 
 static void mlx5e_rep_neigh_entry_hold(struct mlx5e_neigh_hash_entry *nhe)
 {
+#ifdef HAVE_REFCOUNT
 	refcount_inc(&nhe->refcnt);
+#else
+	atomic_inc(&nhe->refcnt);
+#endif
 }
 
 static void mlx5e_rep_neigh_entry_release(struct mlx5e_neigh_hash_entry *nhe)
 {
+#ifdef HAVE_REFCOUNT
 	if (refcount_dec_and_test(&nhe->refcnt))
+#else
+	if (atomic_dec_and_test(&nhe->refcnt))
+#endif
 		kfree(nhe);
 }
 
@@ -383,7 +412,9 @@ static int mlx5e_rep_netevent_event(stru
 			return NOTIFY_DONE;
 
 		m_neigh.dev = n->dev;
+#ifdef HAVE_TCF_TUNNEL_INFO
 		m_neigh.family = n->ops->family;
+#endif
 		memcpy(&m_neigh.dst_ip, n->primary_key, n->tbl->key_len);
 
 		/* We are in atomic context and can't take RTNL mutex, so use
@@ -455,7 +486,9 @@ static int mlx5e_rep_netevent_event(stru
 	}
 	return NOTIFY_DONE;
 }
+#endif /* HAVE_TCF_TUNNEL_INFO */
 
+#ifdef HAVE_RHASHTABLE_PARAMS_AUTOMATIC_SHRINKING
 static const struct rhashtable_params mlx5e_neigh_ht_params = {
 	.head_offset = offsetof(struct mlx5e_neigh_hash_entry, rhash_node),
 	.key_offset = offsetof(struct mlx5e_neigh_hash_entry, m_neigh),
@@ -473,6 +506,7 @@ static int mlx5e_rep_neigh_init(struct m
 		return err;
 
 	INIT_LIST_HEAD(&neigh_update->neigh_list);
+#ifdef HAVE_TCF_TUNNEL_INFO
 	spin_lock_init(&neigh_update->encap_lock);
 	INIT_DELAYED_WORK(&neigh_update->neigh_stats_work,
 			  mlx5e_rep_neigh_stats_work);
@@ -486,12 +520,14 @@ static int mlx5e_rep_neigh_init(struct m
 
 out_err:
 	rhashtable_destroy(&neigh_update->neigh_ht);
+#endif
 	return err;
 }
 
 static void mlx5e_rep_neigh_cleanup(struct mlx5e_rep_priv *rpriv)
 {
 	struct mlx5e_neigh_update_table *neigh_update = &rpriv->neigh_update;
+#ifdef HAVE_TCF_TUNNEL_INFO
 	struct mlx5e_priv *priv = rpriv_priv(rpriv);
 
 	unregister_netevent_notifier(&neigh_update->netevent_nb);
@@ -499,10 +535,12 @@ static void mlx5e_rep_neigh_cleanup(stru
 	flush_workqueue(priv->wq); /* flush neigh update works */
 
 	cancel_delayed_work_sync(&rpriv->neigh_update.neigh_stats_work);
+#endif
 
 	rhashtable_destroy(&neigh_update->neigh_ht);
 }
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 static int mlx5e_rep_neigh_entry_insert(struct mlx5e_priv *priv,
 					struct mlx5e_neigh_hash_entry *nhe)
 {
@@ -525,14 +563,18 @@ static void mlx5e_rep_neigh_entry_remove
 {
 	struct mlx5e_rep_priv *rpriv = priv->ppriv;
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 	spin_lock_bh(&rpriv->neigh_update.encap_lock);
+#endif
 
 	list_del(&nhe->neigh_list);
 
 	rhashtable_remove_fast(&rpriv->neigh_update.neigh_ht,
 			       &nhe->rhash_node,
 			       mlx5e_neigh_ht_params);
+#ifdef HAVE_TCF_TUNNEL_INFO
 	spin_unlock_bh(&rpriv->neigh_update.encap_lock);
+#endif
 }
 
 /* This function must only be called under RTNL lock or under the
@@ -562,7 +604,11 @@ static int mlx5e_rep_neigh_entry_create(
 	memcpy(&(*nhe)->m_neigh, &e->m_neigh, sizeof(e->m_neigh));
 	INIT_WORK(&(*nhe)->neigh_update_work, mlx5e_rep_neigh_update);
 	INIT_LIST_HEAD(&(*nhe)->encap_list);
+#ifdef HAVE_REFCOUNT
 	refcount_set(&(*nhe)->refcnt, 1);
+#else
+	atomic_set(&(*nhe)->refcnt, 1);
+#endif
 
 	err = mlx5e_rep_neigh_entry_insert(priv, *nhe);
 	if (err)
@@ -614,6 +660,8 @@ void mlx5e_rep_encap_entry_detach(struct
 	if (list_empty(&nhe->encap_list))
 		mlx5e_rep_neigh_entry_destroy(priv, nhe);
 }
+#endif /* HAVE_TCF_TUNNEL_INFO */
+#endif /* HAVE_RHASHTABLE_PARAMS_AUTOMATIC_SHRINKING */
 
 static int mlx5e_rep_open(struct net_device *dev)
 {
@@ -652,6 +700,7 @@ static int mlx5e_rep_close(struct net_de
 	return ret;
 }
 
+#if defined(HAVE_NDO_GET_PHYS_PORT_NAME) || defined(HAVE_SWITCHDEV_H_COMPAT)
 static int mlx5e_rep_get_phys_port_name(struct net_device *dev,
 					char *buf, size_t len)
 {
@@ -666,26 +715,90 @@ static int mlx5e_rep_get_phys_port_name(
 
 	return 0;
 }
+#endif
 
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 static int
+#ifdef HAVE_NDO_SETUP_TC_TAKES_TC_SETUP_TYPE
+#ifdef HAVE_TC_BLOCK_OFFLOAD
 mlx5e_rep_setup_tc_cls_flower(struct mlx5e_priv *priv,
+#else
+mlx5e_rep_setup_tc_cls_flower(struct net_device *dev,
+#endif
 			      struct tc_cls_flower_offload *cls_flower)
+#else
+mlx5e_rep_setup_tc_cls_flower(struct net_device *dev,
+			      u32 handle,
+#ifdef HAVE_NDO_SETUP_TC_TAKES_CHAIN_INDEX
+			      u32 chain_index,
+#endif
+			      __be16 proto,
+			      struct tc_to_netdev *tc)
+#endif
 {
+#ifndef HAVE_NDO_SETUP_TC_TAKES_TC_SETUP_TYPE
+	struct tc_cls_flower_offload *cls_flower = tc->cls_flower;
+#endif
+
+#ifdef HAVE_TC_BLOCK_OFFLOAD
 	if (cls_flower->common.chain_index)
+#else
+	struct mlx5e_priv *priv = netdev_priv(dev);
+
+#ifdef HAVE_NDO_SETUP_TC_TAKES_TC_SETUP_TYPE
+	if (!is_classid_clsact_ingress(cls_flower->common.classid) ||
+	    cls_flower->common.chain_index)
+#else
+	if (TC_H_MAJ(handle) != TC_H_MAJ(TC_H_INGRESS) ||
+#ifdef HAVE_NDO_SETUP_TC_TAKES_CHAIN_INDEX
+	    chain_index)
+#else
+	    0)
+#endif
+#endif
+#endif
 		return -EOPNOTSUPP;
 
+#ifdef HAVE_TC_TO_NETDEV_EGRESS_DEV
+#ifndef HAVE_TC_SETUP_CB_EGDEV_REGISTER
+#ifdef HAVE_NDO_SETUP_TC_TAKES_TC_SETUP_TYPE
+	if (cls_flower->egress_dev) {
+#else
+	if (tc->egress_dev) {
+#endif
+		 struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
+
+		 dev = mlx5_eswitch_get_uplink_netdev(esw);
+#ifdef HAVE_NDO_SETUP_TC_TAKES_TC_SETUP_TYPE
+		 return dev->netdev_ops->ndo_setup_tc(dev, TC_SETUP_CLSFLOWER,
+						      cls_flower);
+#else
+		 return dev->netdev_ops->ndo_setup_tc(dev, handle,
+#ifdef HAVE_NDO_SETUP_TC_TAKES_CHAIN_INDEX
+						      chain_index,
+#endif
+						      proto, tc);
+#endif
+	 }
+#endif
+#endif
+
 	switch (cls_flower->command) {
 	case TC_CLSFLOWER_REPLACE:
 		return mlx5e_configure_flower(priv, cls_flower);
 	case TC_CLSFLOWER_DESTROY:
 		return mlx5e_delete_flower(priv, cls_flower);
+#ifdef HAVE_TC_CLSFLOWER_STATS
 	case TC_CLSFLOWER_STATS:
 		return mlx5e_stats_flower(priv, cls_flower);
+#endif
 	default:
 		return -EOPNOTSUPP;
 	}
 }
+#endif /* HAVE_TC_FLOWER_OFFLOAD */
 
+#ifdef HAVE_TC_BLOCK_OFFLOAD
 static int mlx5e_rep_setup_tc_cb(enum tc_setup_type type, void *type_data,
 				 void *cb_priv)
 {
@@ -721,17 +834,57 @@ static int mlx5e_rep_setup_tc_block(stru
 		return -EOPNOTSUPP;
 	}
 }
+#endif
 
+#ifdef HAVE_TC_FLOWER_OFFLOAD
+#ifdef HAVE_NDO_SETUP_TC_TAKES_TC_SETUP_TYPE
 static int mlx5e_rep_setup_tc(struct net_device *dev, enum tc_setup_type type,
 			      void *type_data)
+#else
+static int mlx5e_rep_setup_tc(struct net_device *dev, u32 handle,
+#ifdef HAVE_NDO_SETUP_TC_TAKES_CHAIN_INDEX
+			      u32 chain_index, __be16 proto,
+#else
+			      __be16 proto,
+#endif
+			      struct tc_to_netdev *tc)
+#endif
 {
+#ifndef HAVE_NDO_SETUP_TC_TAKES_TC_SETUP_TYPE
+	unsigned int type = tc->type;
+#endif
+
 	switch (type) {
+#ifdef HAVE_TC_BLOCK_OFFLOAD
 	case TC_SETUP_BLOCK:
 		return mlx5e_rep_setup_tc_block(dev, type_data);
+#else
+	case TC_SETUP_CLSFLOWER:
+#ifdef HAVE_NDO_SETUP_TC_TAKES_TC_SETUP_TYPE
+		return mlx5e_rep_setup_tc_cls_flower(dev, type_data);
+#else
+		return mlx5e_rep_setup_tc_cls_flower(dev, handle,
+#ifdef HAVE_NDO_SETUP_TC_TAKES_CHAIN_INDEX
+						     chain_index,
+#endif
+						     proto, tc);
+#endif
+#endif
 	default:
 		return -EOPNOTSUPP;
 	}
 }
+#endif
+
+#if !defined(HAVE_TC_BLOCK_OFFLOAD) && defined(HAVE_TC_SETUP_CB_EGDEV_REGISTER)
+static int mlx5e_rep_setup_tc_cb(enum tc_setup_type type, void *type_data,
+				 void *cb_priv)
+{
+	struct net_device *dev = cb_priv;
+
+	return mlx5e_setup_tc(dev, type, type_data);
+}
+#endif
 
 bool mlx5e_is_uplink_rep(struct mlx5e_priv *priv)
 {
@@ -750,6 +903,7 @@ bool mlx5e_is_uplink_rep(struct mlx5e_pr
 	return false;
 }
 
+#ifdef NDO_HAS_OFFLOAD_STATS_GETS_NET_DEVICE
 static bool mlx5e_is_vf_vport_rep(struct mlx5e_priv *priv)
 {
 	struct mlx5e_rep_priv *rpriv = priv->ppriv;
@@ -773,7 +927,9 @@ bool mlx5e_has_offload_stats(const struc
 
 	return false;
 }
+#endif
 
+#ifdef HAVE_NDO_GET_OFFLOAD_STATS
 static int
 mlx5e_get_sw_stats64(const struct net_device *dev,
 		     struct rtnl_link_stats64 *stats)
@@ -801,28 +957,58 @@ int mlx5e_get_offload_stats(int attr_id,
 
 	return -EINVAL;
 }
+#endif
 
-static void
-mlx5e_rep_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
+static
+#ifdef HAVE_NDO_GET_STATS64_RET_VOID
+void mlx5e_rep_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
+#elif defined(HAVE_NDO_GET_STATS64)
+struct rtnl_link_stats64 * mlx5e_rep_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
+#else
+struct net_device_stats * mlx5e_rep_get_stats(struct net_device *dev)
+#endif
 {
 	struct mlx5e_priv *priv = netdev_priv(dev);
+#if !defined(HAVE_NDO_GET_STATS64) && !defined(HAVE_NDO_GET_STATS64_RET_VOID)
+	struct net_device_stats *stats = &priv->netdev_stats;
+#endif
 
 	memcpy(stats, &priv->stats.vf_vport, sizeof(*stats));
+
+#ifndef HAVE_NDO_GET_STATS64_RET_VOID
+	return stats;
+#endif
 }
 
+#ifdef HAVE_SWITCHDEV_OPS
+#ifdef CONFIG_NET_SWITCHDEV
 static const struct switchdev_ops mlx5e_rep_switchdev_ops = {
 	.switchdev_port_attr_get	= mlx5e_attr_get,
 };
+#endif
+#endif
 
 static const struct net_device_ops mlx5e_netdev_ops_rep = {
 	.ndo_open                = mlx5e_rep_open,
 	.ndo_stop                = mlx5e_rep_close,
 	.ndo_start_xmit          = mlx5e_xmit,
+#ifdef HAVE_NDO_GET_PHYS_PORT_NAME
 	.ndo_get_phys_port_name  = mlx5e_rep_get_phys_port_name,
+#endif
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 	.ndo_setup_tc            = mlx5e_rep_setup_tc,
+#endif
+#if defined(HAVE_NDO_GET_STATS64) || defined(HAVE_NDO_GET_STATS64_RET_VOID)
 	.ndo_get_stats64         = mlx5e_rep_get_stats,
+#else
+	.ndo_get_stats           = mlx5e_rep_get_stats,
+#endif
+#ifdef NDO_HAS_OFFLOAD_STATS_GETS_NET_DEVICE
 	.ndo_has_offload_stats	 = mlx5e_has_offload_stats,
+#endif
+#ifdef HAVE_NDO_GET_OFFLOAD_STATS
 	.ndo_get_offload_stats	 = mlx5e_get_offload_stats,
+#endif
 };
 
 static void mlx5e_build_rep_params(struct mlx5_core_dev *mdev,
@@ -854,12 +1040,20 @@ static void mlx5e_build_rep_netdev(struc
 
 	netdev->ethtool_ops	  = &mlx5e_rep_ethtool_ops;
 
+#ifdef HAVE_SWITCHDEV_OPS
 #ifdef CONFIG_NET_SWITCHDEV
 	netdev->switchdev_ops = &mlx5e_rep_switchdev_ops;
 #endif
+#endif
 
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 	netdev->features	 |= NETIF_F_VLAN_CHALLENGED | NETIF_F_HW_TC | NETIF_F_NETNS_LOCAL;
+#else
+	netdev->features	 |= NETIF_F_VLAN_CHALLENGED;
+#endif
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 	netdev->hw_features      |= NETIF_F_HW_TC;
+#endif
 
 	eth_hw_addr_random(netdev);
 }
@@ -984,6 +1178,7 @@ static const struct mlx5e_profile mlx5e_
 static int
 mlx5e_nic_rep_load(struct mlx5_core_dev *dev, struct mlx5_eswitch_rep *rep)
 {
+#ifdef HAVE_RHASHTABLE_PARAMS_AUTOMATIC_SHRINKING
 	struct mlx5e_priv *priv = rep_priv(rep);
 	struct mlx5e_rep_priv *rpriv = priv->ppriv;
 
@@ -1004,13 +1199,22 @@ mlx5e_nic_rep_load(struct mlx5_core_dev
 err_remove_sqs:
 	mlx5e_remove_sqs_fwd_rules(priv);
 	return err;
+#else
+	struct mlx5e_priv *priv = rep_priv(rep);
+
+	if (test_bit(MLX5E_STATE_OPENED, &priv->state))
+		return mlx5e_add_sqs_fwd_rules(priv);
+	return 0;
+#endif
 }
 
 static void
 mlx5e_nic_rep_unload(struct mlx5_eswitch_rep *rep)
 {
 	struct mlx5e_priv *priv = rep_priv(rep);
+#ifdef HAVE_RHASHTABLE_PARAMS_AUTOMATIC_SHRINKING
 	struct mlx5e_rep_priv *rpriv = priv->ppriv;
+#endif
 
 	if (test_bit(MLX5E_STATE_OPENED, &priv->state))
 		mlx5e_remove_sqs_fwd_rules(priv);
@@ -1019,17 +1223,90 @@ mlx5e_nic_rep_unload(struct mlx5_eswitch
 	mlx5e_tc_cleanup(priv);
 	mlx5e_tc_init(priv);
 
+#ifdef HAVE_RHASHTABLE_PARAMS_AUTOMATIC_SHRINKING
 	mlx5e_rep_neigh_cleanup(rpriv);
+#endif
+}
+
+#ifdef HAVE_SWITCHDEV_H_COMPAT
+static inline int dev_isalive(const struct net_device *dev)
+{
+	return dev->reg_state <= NETREG_REGISTERED;
 }
 
+static ssize_t phys_port_name_show(struct device *dev,
+				   struct device_attribute *attr, char *buf)
+{
+	struct net_device *netdev = to_net_dev(dev);
+	ssize_t ret = -EINVAL;
+
+	if (!rtnl_trylock())
+		return restart_syscall();
+
+	if (dev_isalive(netdev)) {
+		char name[IFNAMSIZ];
+
+		ret = mlx5e_rep_get_phys_port_name(netdev, name, sizeof(name));
+		if (!ret)
+			ret = sprintf(buf, "%s\n", name);
+	}
+	rtnl_unlock();
+
+	return ret;
+}
+
+ssize_t phys_switch_id_show(struct device *dev,
+			    struct device_attribute *attr, char *buf)
+{
+	struct net_device *netdev = to_net_dev(dev);
+	ssize_t ret = -EINVAL;
+
+	if (!rtnl_trylock())
+		return restart_syscall();
+
+	if (dev_isalive(netdev)) {
+		struct switchdev_attr attr = {
+			.orig_dev = netdev,
+			.id = SWITCHDEV_ATTR_ID_PORT_PARENT_ID,
+			.flags = SWITCHDEV_F_NO_RECURSE,
+		};
+
+		ret = mlx5e_attr_get(netdev, &attr);
+		if (!ret)
+			ret = sprintf(buf, "%*phN\n", attr.u.ppid.id_len,
+				      attr.u.ppid.id);
+	}
+	rtnl_unlock();
+
+	return ret;
+}
+
+static DEVICE_ATTR(phys_port_name, S_IRUGO, phys_port_name_show, NULL);
+static DEVICE_ATTR(phys_switch_id, S_IRUGO, phys_switch_id_show, NULL);
+
+static struct attribute *rep_sysfs_attrs[] = {
+	&dev_attr_phys_port_name.attr,
+	&dev_attr_phys_switch_id.attr,
+	NULL,
+};
+
+static struct attribute_group rep_sysfs_attr_group = {
+	.attrs = rep_sysfs_attrs,
+};
+#endif /* HAVE_SWITCHDEV_H_COMPAT */
+
 static int
 mlx5e_vport_rep_load(struct mlx5_core_dev *dev, struct mlx5_eswitch_rep *rep)
 {
 	struct mlx5e_rep_context *context;
 	struct mlx5e_rep_priv *rpriv;
 	struct net_device *netdev;
+#ifdef HAVE_TC_BLOCK_OFFLOAD
 	struct mlx5e_priv *upriv;
+#endif
+#ifdef HAVE_TC_SETUP_CB_EGDEV_REGISTER
 	struct mlx5_eswitch *esw = dev->priv.eswitch;
+#endif
 	int err;
 
 	rpriv = kzalloc(sizeof(*rpriv), GFP_KERNEL);
@@ -1055,18 +1332,33 @@ mlx5e_vport_rep_load(struct mlx5_core_de
 		goto err_destroy_netdev;
 	}
 
+#ifdef HAVE_RHASHTABLE_PARAMS_AUTOMATIC_SHRINKING
 	err = mlx5e_rep_neigh_init(rpriv);
 	if (err) {
 		pr_warn("Failed to initialized neighbours handling for vport %d\n",
 			rep->vport);
 		goto err_detach_netdev;
 	}
+#endif
 
+#ifdef HAVE_TC_SETUP_CB_EGDEV_REGISTER
+#ifdef HAVE_TC_BLOCK_OFFLOAD
 	upriv = netdev_priv(mlx5_eswitch_get_uplink_netdev(esw));
 	err = tc_setup_cb_egdev_register(netdev, mlx5e_setup_tc_block_cb,
 					 upriv);
+#else
+	err = tc_setup_cb_egdev_register(netdev, mlx5e_rep_setup_tc_cb,
+					 mlx5_eswitch_get_uplink_netdev(esw));
+#endif
 	if (err)
 		goto err_neigh_cleanup;
+#endif
+
+#ifdef HAVE_SWITCHDEV_H_COMPAT
+	if (!netdev->sysfs_groups[0]) {
+		netdev->sysfs_groups[0] = &rep_sysfs_attr_group;
+	}
+#endif
 
 	err = register_netdev(netdev);
 	if (err) {
@@ -1078,13 +1370,22 @@ mlx5e_vport_rep_load(struct mlx5_core_de
 	return 0;
 
 err_egdev_cleanup:
+#ifdef HAVE_TC_SETUP_CB_EGDEV_REGISTER
+#ifdef HAVE_TC_BLOCK_OFFLOAD
 	tc_setup_cb_egdev_unregister(netdev, mlx5e_setup_tc_block_cb,
 				     upriv);
+#else
+	tc_setup_cb_egdev_unregister(netdev, mlx5e_rep_setup_tc_cb,
+				     mlx5_eswitch_get_uplink_netdev(esw));
+#endif
 
 err_neigh_cleanup:
+#endif
+#ifdef HAVE_RHASHTABLE_PARAMS_AUTOMATIC_SHRINKING
 	mlx5e_rep_neigh_cleanup(rpriv);
 
 err_detach_netdev:
+#endif
 	mlx5e_detach_netdev(netdev_priv(netdev));
 
 err_destroy_netdev:
@@ -1098,16 +1399,31 @@ mlx5e_vport_rep_unload(struct mlx5_eswit
 {
 	struct net_device *netdev = mlx5e_rep_to_context(rep)->netdev;
 	struct mlx5e_priv *priv = netdev_priv(netdev);
+#ifdef HAVE_RHASHTABLE_PARAMS_AUTOMATIC_SHRINKING
 	struct mlx5e_rep_priv *rpriv = priv->ppriv;
+#endif
+#ifdef HAVE_TC_SETUP_CB_EGDEV_REGISTER
 	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
+#endif
 	void *ppriv = priv->ppriv;
+#ifdef HAVE_TC_BLOCK_OFFLOAD
 	struct mlx5e_priv *upriv;
+#endif
 
 	unregister_netdev(netdev);
+#ifdef HAVE_TC_SETUP_CB_EGDEV_REGISTER
+#ifdef HAVE_TC_BLOCK_OFFLOAD
 	upriv = netdev_priv(mlx5_eswitch_get_uplink_netdev(esw));
 	tc_setup_cb_egdev_unregister(netdev, mlx5e_setup_tc_block_cb,
 				     upriv);
+#else
+	tc_setup_cb_egdev_unregister(netdev, mlx5e_rep_setup_tc_cb,
+				     mlx5_eswitch_get_uplink_netdev(esw));
+#endif
+#endif
+#ifdef HAVE_RHASHTABLE_PARAMS_AUTOMATIC_SHRINKING
 	mlx5e_rep_neigh_cleanup(rpriv);
+#endif
 	mlx5e_detach_netdev(priv);
 	mlx5e_destroy_netdev(priv);
 	kfree(ppriv); /* mlx5e_rep_priv */
