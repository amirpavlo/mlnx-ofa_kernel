From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/main.c

Change-Id: I2a1ff2213a4603129eb4803e7aa6c7f716da696b
Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
---
 drivers/net/ethernet/mellanox/mlx5/core/main.c | 42 +++++++++++++++++++++++---
 1 file changed, 38 insertions(+), 4 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@ -393,6 +393,9 @@ static int mlx5_enable_msix(struct mlx5_
 	struct mlx5_eq_table *table = &priv->eq_table;
 	int num_eqs = 1 << MLX5_CAP_GEN(dev, log_max_eq);
 	int nvec;
+#ifndef HAVE_PCI_ENABLE_MSIX_RANGE
+	int err;
+#endif
 	int i;
 
 	nvec = MLX5_CAP_GEN(dev, num_ports) * num_online_cpus() +
@@ -410,13 +413,25 @@ static int mlx5_enable_msix(struct mlx5_
 	for (i = 0; i < nvec; i++)
 		priv->msix_arr[i].entry = i;
 
+#ifdef HAVE_PCI_ENABLE_MSIX_RANGE
 	nvec = pci_enable_msix_range(dev->pdev, priv->msix_arr,
 				     MLX5_EQ_VEC_COMP_BASE + 1, nvec);
 	if (nvec < 0)
 		return nvec;
 
 	table->num_comp_vectors = nvec - MLX5_EQ_VEC_COMP_BASE;
-
+#else
+retry:
+	table->num_comp_vectors = nvec - MLX5_EQ_VEC_COMP_BASE;
+	err = pci_enable_msix(dev->pdev, priv->msix_arr, nvec);
+	if (err <= 0) {
+		return err;
+	} else if (err > 2) {
+		nvec = err;
+		goto retry;
+	}
+	mlx5_core_dbg(dev, "received %d MSI vectors out of %d requested\n", err, nvec);
+#endif
 	return 0;
 
 err_free_msix:
@@ -800,9 +815,11 @@ static int mlx5_irq_set_affinity_hint(st
 	cpumask_set_cpu(cpumask_local_spread(i, priv->numa_node),
 			priv->irq_info[i].mask);
 
+#ifdef HAVE_IRQ_SET_AFFINITY_HINT
 	if (IS_ENABLED(CONFIG_SMP) &&
 	    irq_set_affinity_hint(irq, priv->irq_info[i].mask))
 		mlx5_core_warn(mdev, "irq_set_affinity_hint failed, irq 0x%.4x", irq);
+#endif
 
 	return 0;
 }
@@ -813,7 +830,9 @@ static void mlx5_irq_clear_affinity_hint
 	struct msix_entry *msix = priv->msix_arr;
 	int irq                 = msix[i + MLX5_EQ_VEC_COMP_BASE].vector;
 
+#ifdef HAVE_IRQ_SET_AFFINITY_HINT
 	irq_set_affinity_hint(irq, NULL);
+#endif
 	free_cpumask_var(priv->irq_info[i].mask);
 }
 
@@ -1185,11 +1204,13 @@ static int mlx5_init_once(struct mlx5_co
 		goto err_rl_cleanup;
 	}
 
+#ifdef HAVE_GET_SET_DUMP
 	err = mlx5_mst_dump_init(dev);
 	if (err) {
 		dev_err(&pdev->dev, "Failed to init mst dump %d\n", err);
 		goto err_mpfs_cleanup;
 	}
+#endif
 
 	err = mlx5_eswitch_init(dev);
 	if (err) {
@@ -1216,8 +1237,10 @@ err_sriov_cleanup:
 err_eswitch_cleanup:
 	mlx5_eswitch_cleanup(dev->priv.eswitch);
 err_mst_dump_cleanup:
+#ifdef HAVE_GET_SET_DUMP
 	mlx5_mst_dump_cleanup(dev);
 err_mpfs_cleanup:
+#endif
 	mlx5_mpfs_cleanup(dev);
 err_rl_cleanup:
 	mlx5_cleanup_rl_table(dev);
@@ -1240,7 +1263,9 @@ static void mlx5_cleanup_once(struct mlx
 	mlx5_fpga_cleanup(dev);
 	mlx5_sriov_cleanup(dev);
 	mlx5_eswitch_cleanup(dev->priv.eswitch);
+#ifdef HAVE_GET_SET_DUMP
 	mlx5_mst_dump_cleanup(dev);
+#endif
 	mlx5_mpfs_cleanup(dev);
 	mlx5_cleanup_rl_table(dev);
 	mlx5_cleanup_dct_table(dev);
@@ -1568,12 +1593,18 @@ struct mlx5_core_event_handler {
 
 static const struct devlink_ops mlx5_devlink_ops = {
 #ifdef CONFIG_MLX5_ESWITCH
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_MODE_GET_SET
 	.eswitch_mode_set = mlx5_devlink_eswitch_mode_set,
 	.eswitch_mode_get = mlx5_devlink_eswitch_mode_get,
+#endif /* HAVE_DEVLINK_HAS_ESWITCH_MODE_GET_SET */
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_INLINE_MODE_GET_SET
 	.eswitch_inline_mode_set = mlx5_devlink_eswitch_inline_mode_set,
 	.eswitch_inline_mode_get = mlx5_devlink_eswitch_inline_mode_get,
+#endif /* HAVE_DEVLINK_HAS_ESWITCH_INLINE_MODE_GET_SET */
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_ENCAP_MODE_SET
 	.eswitch_encap_mode_set = mlx5_devlink_eswitch_encap_mode_set,
 	.eswitch_encap_mode_get = mlx5_devlink_eswitch_encap_mode_get,
+#endif /* HAVE_DEVLINK_HAS_ESWITCH_ENCAP_MODE_SET */
 #endif
 };
 
@@ -1657,15 +1688,12 @@ static int init_one(struct pci_dev *pdev
 	}
 
 	request_module_nowait(MLX5_IB_MOD);
-
 	err = devlink_register(devlink, &pdev->dev);
 	if (err)
 		goto clean_load;
-
 	pci_save_state(pdev);
 
 	return 0;
-
 clean_load:
 	mlx5_unload_one(dev, priv, true);
 clean_crdump:
@@ -1891,7 +1919,11 @@ static void mlx5_pci_resume(struct pci_d
 		dev_info(&pdev->dev, "%s: device recovered\n", __func__);
 }
 
+#ifdef CONFIG_COMPAT_IS_CONST_PCI_ERROR_HANDLERS
 static const struct pci_error_handlers mlx5_err_handler = {
+#else
+static struct pci_error_handlers mlx5_err_handler = {
+#endif
 	.error_detected = mlx5_pci_err_detected,
 	.slot_reset	= mlx5_pci_slot_reset,
 	.resume		= mlx5_pci_resume
@@ -1986,7 +2018,9 @@ static struct pci_driver mlx5_core_drive
 	.remove         = remove_one,
 	.shutdown	= shutdown,
 	.err_handler	= &mlx5_err_handler,
+#ifdef HAVE_PCI_DRIVER_SRIOV_CONFIGURE
 	.sriov_configure   = mlx5_core_sriov_configure,
+#endif
 };
 
 static void mlx5_core_verify_params(void)
