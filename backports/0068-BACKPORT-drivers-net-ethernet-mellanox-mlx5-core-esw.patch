From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/eswitch.c

Change-Id: I8c2fa2c3f3296ea24abf683fb37d269d8e50e6ae
---
 drivers/net/ethernet/mellanox/mlx5/core/eswitch.c | 28 +++++++++++++++++++++++
 1 file changed, 28 insertions(+)

--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
@@ -440,6 +440,7 @@ static void update_allmulti_vports(struc
 {
 	u8 *mac = vaddr->node.addr;
 	u32 vport_idx = 0;
+	COMPAT_HL_NODE
 
 	for (vport_idx = 0; vport_idx < esw->total_vports; vport_idx++) {
 		struct mlx5_vport *vport = &esw->vports[vport_idx];
@@ -487,6 +488,7 @@ static int esw_add_mc_addr(struct mlx5_e
 	struct esw_mc_addr *esw_mc;
 	u8 *mac = vaddr->node.addr;
 	u32 vport = vaddr->vport;
+	COMPAT_HL_NODE
 
 	if (!esw->fdb_table.fdb)
 		return 0;
@@ -527,6 +529,7 @@ static int esw_del_mc_addr(struct mlx5_e
 	struct esw_mc_addr *esw_mc;
 	u8 *mac = vaddr->node.addr;
 	u32 vport = vaddr->vport;
+	COMPAT_HL_NODE
 
 	if (!esw->fdb_table.fdb)
 		return 0;
@@ -576,6 +579,7 @@ static void esw_apply_vport_addr_list(st
 	struct hlist_head *hash;
 	struct hlist_node *tmp;
 	int hi;
+	COMPAT_HL_NODE
 
 	vport_addr_add = is_uc ? esw_add_uc_addr :
 				 esw_add_mc_addr;
@@ -613,6 +617,7 @@ static void esw_update_vport_addr_list(s
 	int err;
 	int hi;
 	int i;
+	COMPAT_HL_NODE
 
 	size = is_uc ? MLX5_MAX_UC_PER_VPORT(esw->dev) :
 		       MLX5_MAX_MC_PER_VPORT(esw->dev);
@@ -734,6 +739,7 @@ static void esw_update_vport_mc_promisc(
 	struct hlist_head *hash;
 	struct hlist_node *tmp;
 	int hi;
+	COMPAT_HL_NODE
 
 	hash = vport->mc_list;
 
@@ -2068,8 +2074,12 @@ int mlx5_eswitch_init(struct mlx5_core_d
 	if (err)
 		goto abort;
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 	hash_init(esw->offloads.encap_tbl);
+#endif
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 	hash_init(esw->offloads.mod_hdr_tbl);
+#endif
 	mutex_init(&esw->state_lock);
 
 	access_other_hca_roce = MLX5_CAP_GEN(dev, vhca_group_manager) &&
@@ -2103,6 +2113,9 @@ int mlx5_eswitch_init(struct mlx5_core_d
 
 	dev->priv.eswitch = esw;
 
+	mlx5_eswitch_compat_debugfs_init(esw);
+
+
 	return 0;
 abort:
 	if (esw->work_queue)
@@ -2163,6 +2176,7 @@ void mlx5_eswitch_cleanup(struct mlx5_es
 
 	esw_info(esw->dev, "cleanup\n");
 
+	mlx5_eswitch_compat_debugfs_cleanup(esw);
 	esw->dev->priv.eswitch = NULL;
 	destroy_workqueue(esw->work_queue);
 	kfree(esw->vports);
@@ -2269,6 +2283,7 @@ unlock:
 	return 0;
 }
 
+#ifdef HAVE_IFLA_VF_INFO
 int mlx5_eswitch_get_vport_config(struct mlx5_eswitch *esw,
 				  int vport, struct ifla_vf_info *ivi)
 {
@@ -2286,18 +2301,31 @@ int mlx5_eswitch_get_vport_config(struct
 
 	mutex_lock(&esw->state_lock);
 	ether_addr_copy(ivi->mac, evport->info.mac);
+#ifdef HAVE_LINKSTATE
 	ivi->linkstate = evport->info.link_state;
+#endif
 	ivi->vlan = evport->info.vlan;
 	ivi->qos = evport->info.qos;
+#ifdef HAVE_VF_VLAN_PROTO
 	ivi->vlan_proto = evport->info.vlan_proto;
+#endif
+#ifdef HAVE_VF_INFO_SPOOFCHK
 	ivi->spoofchk = evport->info.spoofchk;
+#endif
+#ifdef HAVE_VF_INFO_TRUST
 	ivi->trusted = evport->info.trusted;
+#endif
+#ifdef HAVE_TX_RATE_LIMIT
 	ivi->min_tx_rate = evport->info.min_rate;
 	ivi->max_tx_rate = evport->info.max_rate;
+#else
+	ivi->tx_rate = evport->info.max_rate;
+#endif
 	mutex_unlock(&esw->state_lock);
 
 	return 0;
 }
+#endif
 
 int __mlx5_eswitch_set_vport_vlan(struct mlx5_eswitch *esw, int vport, u16 vlan,
 				  u8 qos, __be16 proto, u8 set_flags)
