From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/core/netlink.c

Change-Id: I935e89872d8d773a26cb5d793f83c54809422642
---
 drivers/infiniband/core/netlink.c | 70 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 70 insertions(+)

--- a/drivers/infiniband/core/netlink.c
+++ b/drivers/infiniband/core/netlink.c
@@ -96,7 +96,11 @@ static bool is_nl_valid(unsigned int typ
 	}
 #endif
 
+#ifdef HAVE_NETLINK_EXT_ACK
 	if (!cb_table || (!cb_table[op].dump && !cb_table[op].doit))
+#else
+	if (!cb_table || (!cb_table[op].dump))
+#endif
 		return false;
 	return true;
 }
@@ -161,13 +165,23 @@ int ibnl_put_attr(struct sk_buff *skb, s
 }
 EXPORT_SYMBOL(ibnl_put_attr);
 
+#ifdef HAVE_NETLINK_EXT_ACK
 static int rdma_nl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh,
 			   struct netlink_ext_ack *extack)
+#else
+static int rdma_nl_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh)
+#endif
 {
 	int type = nlh->nlmsg_type;
 	unsigned int index = RDMA_NL_GET_CLIENT(type);
 	unsigned int op = RDMA_NL_GET_OP(type);
 	const struct rdma_nl_cbs *cb_table;
+#ifndef HAVE_NETLINK_EXT_ACK
+	struct netlink_callback cb = {};
+#ifdef HAVE_NETLINK_DUMP_CONTROL_DUMP
+	struct netlink_dump_control c = {};
+#endif
+#endif
 
 	if (!is_nl_valid(index, op))
 		return -EINVAL;
@@ -175,9 +189,14 @@ static int rdma_nl_rcv_msg(struct sk_buf
 	cb_table = rdma_nl_types[index].cb_table;
 
 	if ((cb_table[op].flags & RDMA_NL_ADMIN_PERM) &&
+#ifdef HAVE_NETLINK_CAPABLE
 	    !netlink_capable(skb, CAP_NET_ADMIN))
+#else
+	    sock_net(skb->sk) != &init_net)
+#endif
 		return -EPERM;
 
+#ifdef HAVE_NETLINK_EXT_ACK
 	/*
 	 * LS responses overload the 0x100 (NLM_F_ROOT) flag.  Don't
 	 * mistakenly call the .dump() function.
@@ -190,11 +209,17 @@ static int rdma_nl_rcv_msg(struct sk_buf
 	/* FIXME: Convert IWCM to properly handle doit callbacks */
 	if ((nlh->nlmsg_flags & NLM_F_DUMP) || index == RDMA_NL_RDMA_CM ||
 	    index == RDMA_NL_IWCM) {
+#ifdef HAVE_NETLINK_DUMP_CONTROL_DUMP
 		struct netlink_dump_control c = {
 			.dump = cb_table[op].dump,
 		};
 		if (c.dump)
 			return netlink_dump_start(nls, skb, nlh, &c);
+#else
+		return netlink_dump_start(nls, skb, nlh,
+					  cb_table[op].dump,
+					  NULL, 0);
+#endif
 		return -EINVAL;
 	}
 
@@ -202,6 +227,28 @@ static int rdma_nl_rcv_msg(struct sk_buf
 		return cb_table[op].doit(skb, nlh, extack);
 
 	return 0;
+#else /* HAVE_NETLINK_EXT_ACK */
+	/* 
+	 * For response or local service set_timeout request,
+	 * there is no need to use netlink_dump_start.
+	 */
+	if (!(nlh->nlmsg_flags & NLM_F_REQUEST) ||
+	    (index == RDMA_NL_LS && op == RDMA_NL_LS_OP_SET_TIMEOUT)) {
+		cb.skb = skb;
+		cb.nlh = nlh;
+		cb.dump = cb_table[op].dump;
+		return cb.dump(skb, &cb);
+	}
+
+#ifdef HAVE_NETLINK_DUMP_CONTROL_DUMP
+	c.dump = rdma_nl_types[index].cb_table[op].dump;
+	return netlink_dump_start(nls, skb, nlh, &c);
+#else
+	return netlink_dump_start(nls, skb, nlh,
+				  cb_table[op].dump,
+				  NULL, 0);
+#endif
+#endif /* HAVE_NETLINK_EXT_ACK */
 }
 
 /*
@@ -211,10 +258,16 @@ static int rdma_nl_rcv_msg(struct sk_buf
  * for that consumer only.
  */
 static int rdma_nl_rcv_skb(struct sk_buff *skb, int (*cb)(struct sk_buff *,
+#ifdef HAVE_NETLINK_EXT_ACK
 						   struct nlmsghdr *,
 						   struct netlink_ext_ack *))
+#else
+						   struct nlmsghdr *))
+#endif
 {
+#ifdef HAVE_NETLINK_EXT_ACK
 	struct netlink_ext_ack extack = {};
+#endif
 	struct nlmsghdr *nlh;
 	int err;
 
@@ -242,13 +295,21 @@ static int rdma_nl_rcv_skb(struct sk_buf
 		if (nlh->nlmsg_type < NLMSG_MIN_TYPE)
 			goto ack;
 
+#ifdef HAVE_NETLINK_EXT_ACK
 		err = cb(skb, nlh, &extack);
+#else
+		err = cb(skb, nlh);
+#endif
 		if (err == -EINTR)
 			goto skip;
 
 ack:
 		if (nlh->nlmsg_flags & NLM_F_ACK || err)
+#ifdef HAVE_NETLINK_EXT_ACK
 			netlink_ack(skb, nlh, err, &extack);
+#else
+			netlink_ack(skb, nlh, err);
+#endif
 
 skip:
 		msglen = NLMSG_ALIGN(nlh->nlmsg_len);
@@ -293,11 +354,20 @@ EXPORT_SYMBOL(rdma_nl_multicast);
 
 int __init rdma_nl_init(void)
 {
+#ifdef HAVE_NETLINK_KERNEL_CFG_INPUT
 	struct netlink_kernel_cfg cfg = {
 		.input	= rdma_nl_rcv,
 	};
 
+#ifdef HAVE_NETLINK_KERNEL_CREATE_3_PARAMS
 	nls = netlink_kernel_create(&init_net, NETLINK_RDMA, &cfg);
+#else
+	nls = netlink_kernel_create(&init_net, NETLINK_RDMA, THIS_MODULE, &cfg);
+#endif
+#else /* HAVE_NETLINK_KERNEL_CFG_INPUT */
+	nls = netlink_kernel_create(&init_net, NETLINK_RDMA, 0, rdma_nl_rcv,
+				    NULL, THIS_MODULE);
+#endif /* HAVE_NETLINK_KERNEL_CFG_INPUT */
 	if (!nls)
 		return -ENOMEM;
 
