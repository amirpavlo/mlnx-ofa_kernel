From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/hw/mlx4/main.c

Change-Id: If48096ef7859169f3f7cccbd5e000506f780ed11
---
 drivers/infiniband/hw/mlx4/main.c | 33 +++++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)

--- a/drivers/infiniband/hw/mlx4/main.c
+++ b/drivers/infiniband/hw/mlx4/main.c
@@ -44,7 +44,9 @@
 
 #include <net/ipv6.h>
 #include <net/addrconf.h>
+#ifdef HAVE_DEVLINK_H
 #include <net/devlink.h>
+#endif
 
 #include <rdma/ib_smi.h>
 #include <rdma/ib_user_verbs.h>
@@ -61,6 +63,16 @@
 #include "mlx4_ib.h"
 #include <rdma/mlx4-abi.h>
 
+#ifdef DRV_NAME
+#undef DRV_NAME
+#endif
+#ifdef DRV_VERSION
+#undef DRV_VERSION
+#endif
+#ifdef DRV_RELDATE
+#undef DRV_RELDATE
+#endif
+
 #define DRV_NAME	MLX4_IB_DRV_NAME
 #define DRV_VERSION	"4.2-1.0.0"
 
@@ -175,6 +187,7 @@ static struct net_device *mlx4_ib_get_ne
 	dev = mlx4_get_protocol_dev(ibdev->dev, MLX4_PROT_ETH, port_num);
 
 	if (dev) {
+#ifdef HAVE_BONDING_H
 		if (mlx4_is_bonded(ibdev->dev)) {
 			struct net_device *upper = NULL;
 
@@ -187,6 +200,7 @@ static struct net_device *mlx4_ib_get_ne
 					dev = active;
 			}
 		}
+#endif
 	}
 	if (dev)
 		dev_hold(dev);
@@ -1141,6 +1155,7 @@ static int mlx4_ib_dealloc_ucontext(stru
 	return 0;
 }
 
+#if defined(HAVE_PUT_TASK_STRUCT_EXPORTED) && defined(HAVE_GET_TASK_PID_EXPORTED) && defined(HAVE_GET_PID_TASK_EXPORTED)
 static void  mlx4_ib_vma_open(struct vm_area_struct *area)
 {
 	/* vma_open is called when a new VMA is created on top of our VMA.
@@ -1271,6 +1286,7 @@ void mlx4_ib_set_vma_data(struct vm_area
 	vma->vm_private_data = vma_private_data;
 	vma->vm_ops =  &mlx4_ib_vm_ops;
 }
+#endif
 
 static int mlx4_ib_mmap(struct ib_ucontext *context, struct vm_area_struct *vma)
 {
@@ -1297,7 +1313,9 @@ static int mlx4_ib_mmap(struct ib_uconte
 				       PAGE_SIZE, vma->vm_page_prot))
 			return -EAGAIN;
 
+#if defined(HAVE_PUT_TASK_STRUCT_EXPORTED) && defined(HAVE_GET_TASK_PID_EXPORTED) && defined(HAVE_GET_PID_TASK_EXPORTED)
 		mlx4_ib_set_vma_data(vma, &mucontext->hw_bar_info[HW_BAR_DB]);
+#endif
 
 	} else if (vma->vm_pgoff == 1 && dev->dev->caps.bf_reg_size != 0) {
 		/* We prevent double mmaping on same context */
@@ -1312,7 +1330,9 @@ static int mlx4_ib_mmap(struct ib_uconte
 				       PAGE_SIZE, vma->vm_page_prot))
 			return -EAGAIN;
 
+#if defined(HAVE_PUT_TASK_STRUCT_EXPORTED) && defined(HAVE_GET_TASK_PID_EXPORTED) && defined(HAVE_GET_PID_TASK_EXPORTED)
 		mlx4_ib_set_vma_data(vma, &mucontext->hw_bar_info[HW_BAR_BF]);
+#endif
 
 	} else if (vma->vm_pgoff == 3) {
 		struct mlx4_clock_params params;
@@ -1336,8 +1356,10 @@ static int mlx4_ib_mmap(struct ib_uconte
 				       PAGE_SIZE, vma->vm_page_prot))
 			return -EAGAIN;
 
+#if defined(HAVE_PUT_TASK_STRUCT_EXPORTED) && defined(HAVE_GET_TASK_PID_EXPORTED) && defined(HAVE_GET_PID_TASK_EXPORTED)
 		mlx4_ib_set_vma_data(vma,
 				     &mucontext->hw_bar_info[HW_BAR_CLOCK]);
+#endif
 	} else if (command == MLX4_IB_EXP_MMAP_EXT_UAR_PAGE) {
 		return mlx4_ib_exp_uar_mmap(context, vma, command);
 	} else if (command == MLX4_IB_EXP_MMAP_EXT_BLUE_FLAME_PAGE) {
@@ -3001,6 +3023,9 @@ static void *mlx4_ib_add(struct mlx4_dev
 	ibdev->ib_dev.exp_create_qp	= mlx4_ib_exp_create_qp;
 	ibdev->ib_dev.exp_query_device	= mlx4_ib_exp_query_device;
 	ibdev->ib_dev.exp_ioctl		= mlx4_ib_exp_ioctl;
+#ifdef HAVE_MM_STRUCT_FREE_AREA_CACHE
+	ibdev->ib_dev.exp_get_unmapped_area = mlx4_ib_exp_get_unmapped_area;
+#endif
 	ibdev->ib_dev.rereg_user_mr	= mlx4_ib_rereg_user_mr;
 	ibdev->ib_dev.dereg_mr		= mlx4_ib_dereg_mr;
 	ibdev->ib_dev.alloc_mr		= mlx4_ib_alloc_mr;
@@ -3010,7 +3035,9 @@ static void *mlx4_ib_add(struct mlx4_dev
 	ibdev->ib_dev.process_mad	= mlx4_ib_process_mad;
 	ibdev->ib_dev.get_port_immutable = mlx4_port_immutable;
 	ibdev->ib_dev.get_dev_fw_str    = get_fw_ver_str;
+#if defined(HAVE_PUT_TASK_STRUCT_EXPORTED) && defined(HAVE_GET_TASK_PID_EXPORTED) && defined(HAVE_GET_PID_TASK_EXPORTED)
 	ibdev->ib_dev.disassociate_ucontext = mlx4_ib_disassociate_ucontext;
+#endif
 
 	if ((dev->caps.flags2 & MLX4_DEV_CAP_FLAG2_RSS) &&
 	    ((mlx4_ib_port_link_layer(&ibdev->ib_dev, 1) ==
@@ -3221,9 +3248,11 @@ static void *mlx4_ib_add(struct mlx4_dev
 	}
 
 	ibdev->ib_active = true;
+#ifdef HAVE_DEVLINK_H
 	mlx4_foreach_port(i, dev, MLX4_PORT_TYPE_IB)
 		devlink_port_type_ib_set(mlx4_get_devlink_port(dev, i),
 					 &ibdev->ib_dev);
+#endif
 
 	if (mlx4_is_mfunc(ibdev->dev))
 		init_pkeys(ibdev);
@@ -3356,10 +3385,14 @@ static void mlx4_ib_remove(struct mlx4_d
 	struct mlx4_ib_dev *ibdev = ibdev_ptr;
 	int dev_idx, ret;
 	int p;
+#ifdef HAVE_DEVLINK_H
 	int i;
+#endif
 
+#ifdef HAVE_DEVLINK_H
 	mlx4_foreach_port(i, dev, MLX4_PORT_TYPE_IB)
 		devlink_port_type_clear(mlx4_get_devlink_port(dev, i));
+#endif
 	ibdev->ib_active = false;
 	flush_workqueue(wq);
 
