From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/main.c

Change-Id: Iadad1899f46244db99b7f9bb6bf696cd62989222
---
 drivers/net/ethernet/mellanox/mlx5/core/main.c | 86 +++++++++++++++++++++++++-
 1 file changed, 83 insertions(+), 3 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@ -397,6 +397,9 @@ static int mlx5_alloc_irq_vectors(struct
 	int num_eqs = 1 << MLX5_CAP_GEN(dev, log_max_eq);
 	int nvec;
 	int err;
+#ifndef HAVE_PCI_IRQ_API
+	int i;
+#endif
 
 	nvec = MLX5_CAP_GEN(dev, num_ports) * num_online_cpus() +
 	       MLX5_EQ_VEC_COMP_BASE;
@@ -405,9 +408,21 @@ static int mlx5_alloc_irq_vectors(struct
 		return -ENOMEM;
 
 	priv->irq_info = kcalloc(nvec, sizeof(*priv->irq_info), GFP_KERNEL);
+#ifdef HAVE_PCI_IRQ_API
 	if (!priv->irq_info)
 		return -ENOMEM;
+#else
+	priv->msix_arr = kcalloc(nvec, sizeof(*priv->msix_arr), GFP_KERNEL);
+	if (!priv->msix_arr || !priv->irq_info) {
+		err = -ENOMEM;
+		goto err_free_irq_info;
+	}
+
+	for (i = 0; i < nvec; i++)
+		 priv->msix_arr[i].entry = i;
+#endif
 
+#ifdef HAVE_PCI_IRQ_API
 	nvec = pci_alloc_irq_vectors(dev->pdev,
 			MLX5_EQ_VEC_COMP_BASE + 1, nvec,
 			PCI_IRQ_MSIX);
@@ -417,11 +432,39 @@ static int mlx5_alloc_irq_vectors(struct
 	}
 
 	table->num_comp_vectors = nvec - MLX5_EQ_VEC_COMP_BASE;
+#else /* HAVE_PCI_IRQ_API */
+#ifdef HAVE_PCI_ENABLE_MSIX_RANGE
+	nvec = pci_enable_msix_range(dev->pdev, priv->msix_arr,
+				     MLX5_EQ_VEC_COMP_BASE + 1, nvec);
+	if (nvec < 0) {
+		err = nvec;
+		goto err_free_irq_info;
+	}
+
+	table->num_comp_vectors = nvec - MLX5_EQ_VEC_COMP_BASE;
+#else /* HAVE_PCI_ENABLE_MSIX_RANGE */
+retry:
+	table->num_comp_vectors = nvec - MLX5_EQ_VEC_COMP_BASE;
+	err = pci_enable_msix(dev->pdev, priv->msix_arr, nvec);
+	if (err == 0) {
+		return 0;
+	} else if (err < 0) {
+		goto err_free_irq_info;
+	} else if (err > 2) {
+		nvec = err;
+		goto retry;
+	}
+	mlx5_core_dbg(dev, "received %d MSI vectors out of %d requested\n", err, nvec);
+#endif /* HAVE_PCI_ENABLE_MSIX_RANGE */
+#endif /* HAVE_PCI_IRQ_API */
 
 	return 0;
 
 err_free_irq_info:
 	kfree(priv->irq_info);
+#ifndef HAVE_PCI_IRQ_API
+	kfree(priv->msix_arr);
+#endif
 	return err;
 }
 
@@ -429,7 +472,12 @@ static void mlx5_free_irq_vectors(struct
 {
 	struct mlx5_priv *priv = &dev->priv;
 
+#ifdef HAVE_PCI_IRQ_API
 	pci_free_irq_vectors(dev->pdev);
+#else
+	pci_disable_msix(dev->pdev);
+	kfree(priv->msix_arr);
+#endif
 	kfree(priv->irq_info);
 }
 
@@ -787,7 +835,14 @@ u64 mlx5_read_internal_timer(struct mlx5
 static int mlx5_irq_set_affinity_hint(struct mlx5_core_dev *mdev, int i)
 {
 	struct mlx5_priv *priv  = &mdev->priv;
+#ifdef HAVE_IRQ_SET_AFFINITY_HINT
+#ifdef HAVE_PCI_IRQ_API
 	int irq = pci_irq_vector(mdev->pdev, MLX5_EQ_VEC_COMP_BASE + i);
+#else
+	struct msix_entry *msix = priv->msix_arr;
+	int irq                 = msix[i + MLX5_EQ_VEC_COMP_BASE].vector;
+#endif
+#endif
 
 	if (!zalloc_cpumask_var(&priv->irq_info[i].mask, GFP_KERNEL)) {
 		mlx5_core_warn(mdev, "zalloc_cpumask_var failed");
@@ -797,9 +852,11 @@ static int mlx5_irq_set_affinity_hint(st
 	cpumask_set_cpu(cpumask_local_spread(i, priv->numa_node),
 			priv->irq_info[i].mask);
 
+#ifdef HAVE_IRQ_SET_AFFINITY_HINT
 	if (IS_ENABLED(CONFIG_SMP) &&
 	    irq_set_affinity_hint(irq, priv->irq_info[i].mask))
 		mlx5_core_warn(mdev, "irq_set_affinity_hint failed, irq 0x%.4x", irq);
+#endif
 
 	return 0;
 }
@@ -807,9 +864,18 @@ static int mlx5_irq_set_affinity_hint(st
 static void mlx5_irq_clear_affinity_hint(struct mlx5_core_dev *mdev, int i)
 {
 	struct mlx5_priv *priv  = &mdev->priv;
+#ifdef HAVE_IRQ_SET_AFFINITY_HINT
+#ifdef HAVE_PCI_IRQ_API
 	int irq = pci_irq_vector(mdev->pdev, MLX5_EQ_VEC_COMP_BASE + i);
+#else
+	struct msix_entry *msix = priv->msix_arr;
+	int irq                 = msix[i + MLX5_EQ_VEC_COMP_BASE].vector;
+#endif
+#endif
 
+#ifdef HAVE_IRQ_SET_AFFINITY_HINT
 	irq_set_affinity_hint(irq, NULL);
+#endif
 	free_cpumask_var(priv->irq_info[i].mask);
 }
 
@@ -978,8 +1044,13 @@ static int alloc_comp_eqs(struct mlx5_co
 		}
 
 #ifdef CONFIG_RFS_ACCEL
+#ifdef HAVE_PCI_IRQ_API
 		irq_cpu_rmap_add(dev->rmap, pci_irq_vector(dev->pdev,
 				 MLX5_EQ_VEC_COMP_BASE + i));
+#else
+		irq_cpu_rmap_add(dev->rmap,
+				 dev->priv.msix_arr[i + MLX5_EQ_VEC_COMP_BASE].vector);
+#endif
 #endif
 		snprintf(name, MLX5_MAX_IRQ_NAME,
 			 MLX5_DEFAULT_COMP_IRQ_NAME, i);
@@ -1575,12 +1646,18 @@ struct mlx5_core_event_handler {
 
 static const struct devlink_ops mlx5_devlink_ops = {
 #ifdef CONFIG_MLX5_ESWITCH
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_MODE_GET_SET
 	.eswitch_mode_set = mlx5_devlink_eswitch_mode_set,
 	.eswitch_mode_get = mlx5_devlink_eswitch_mode_get,
+#endif /* HAVE_DEVLINK_HAS_ESWITCH_MODE_GET_SET */
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_INLINE_MODE_GET_SET
 	.eswitch_inline_mode_set = mlx5_devlink_eswitch_inline_mode_set,
 	.eswitch_inline_mode_get = mlx5_devlink_eswitch_inline_mode_get,
+#endif /* HAVE_DEVLINK_HAS_ESWITCH_INLINE_MODE_GET_SET */
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_ENCAP_MODE_SET
 	.eswitch_encap_mode_set = mlx5_devlink_eswitch_encap_mode_set,
 	.eswitch_encap_mode_get = mlx5_devlink_eswitch_encap_mode_get,
+#endif /* HAVE_DEVLINK_HAS_ESWITCH_ENCAP_MODE_SET */
 #endif
 };
 
@@ -1970,15 +2047,12 @@ static int init_one(struct pci_dev *pdev
 	}
 
 	request_module_nowait(MLX5_IB_MOD);
-
 	err = devlink_register(devlink, &pdev->dev);
 	if (err)
 		goto clean_load;
-
 	pci_save_state(pdev);
 
 	return 0;
-
 clean_load:
 	mlx5_unload_one(dev, priv, true);
 clean_crdump:
@@ -2214,7 +2288,11 @@ static void mlx5_pci_resume(struct pci_d
 		dev_info(&pdev->dev, "%s: device recovered\n", __func__);
 }
 
+#ifdef CONFIG_COMPAT_IS_CONST_PCI_ERROR_HANDLERS
 static const struct pci_error_handlers mlx5_err_handler = {
+#else
+static struct pci_error_handlers mlx5_err_handler = {
+#endif
 	.error_detected = mlx5_pci_err_detected,
 	.slot_reset	= mlx5_pci_slot_reset,
 	.resume		= mlx5_pci_resume
@@ -2309,7 +2387,9 @@ static struct pci_driver mlx5_core_drive
 	.remove         = remove_one,
 	.shutdown	= shutdown,
 	.err_handler	= &mlx5_err_handler,
+#ifdef HAVE_PCI_DRIVER_SRIOV_CONFIGURE
 	.sriov_configure   = mlx5_core_sriov_configure,
+#endif
 };
 
 static void mlx5_core_verify_params(void)
